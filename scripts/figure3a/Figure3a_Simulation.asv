%% Figure3a Simulation %%
% This script computes the data for **Figure 3a** from the paper:
% "Functional stability and recurrent STDP in rhythmogenesis"
%
% Description:

%       - Computes the nullclince of J_EI and J_IE
%       - Computes the vectorflow in JEI-JIE phase diagram.
%       - Saves the data in subfloder - "vectorflow"
 
% IMPORTANT:

%       - The plot of the nullclines is in "Figure3a_plot"

% Dependencies:

%       - JdotPhDiagPt1.m
%       - JdotPhDiagPt2.m
%       - NullclinesParallelPt1.m
%       - NullclinesParallelPt2.m
%       - Correlations_2D_full_diff.m

% Authors: Gabi Socolovsky & Maoz Shamir
% Date: 2025-09-29
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%% Parameters %%%%%%%%%%%%%%%
D=0.4; % Delay
dt=0.01; % Time bin
tf=200; % Final time
Jeemean=0.6; % JEE order parameter
Jiimean=0.4; % JII order parameter
Jiemean=6; % temporary JIE order parameter 
Jeimean=0.52; % temporary JEI order parameter 
Jhat=(Jeemean+Jiimean)/2;
%%% Computing the bifurcation line properties %%%
syms wD JbarD % Angular frequency and Jbar on the bif. line
if Jeemean>Jiimean
range=[0.1 5 ;0.01 pi/(2*D)];
Y=vpasolve([(JbarD^2-Jeemean*Jiimean)^0.5==1/cos(wD*D-acos((Jeemean-Jiimean)/(2*(JbarD^2-Jeemean*Jiimean)^0.5))), wD==-tan(wD*D-acos((Jeemean-Jiimean)/(2*(JbarD^2-Jeemean*Jiimean)^0.5)))], [JbarD,wD],range); % the frequency and Jbar on the bifurcation line
elseif Jeemean<Jiimean
range=[0.1 5 ;0.01 pi/D];    
Y=vpasolve([(JbarD^2-Jeemean*Jiimean)^0.5==1/cos(wD*D-acos((Jeemean-Jiimean)/(2*(JbarD^2-Jeemean*Jiimean)^0.5))), wD==-tan(wD*D-acos((Jeemean-Jiimean)/(2*(JbarD^2-Jeemean*Jiimean)^0.5)))], [JbarD,wD],range); % the frequency and Jbar on the bifurcation line
end    
wD=double(Y.wD);
fD=wD/(2*pi); % in
JbarD=double(Y.JbarD);
phi=acos((Jeemean-Jiimean)/(2*(JbarD^2-Jeemean*Jiimean)^0.5));
psi=acos(Jhat/JbarD);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%% STDP Parameters %%%%%%%%%%
alpha=0.96; % relative depression
mu=0.01;% measure of linearity
Jiemax=20; % J_IE_max
tau_pE=2; % typical potentiation time of excitatory synapses
tau_pI=2; % typical potentiation time of inhibitory synapses
tau_mE=7; % typical depression time of excitatory synapses
tau_mI=3; % typical depression time of inhibitory synapses
thetapI=acos((1+(wD*tau_pI)^2)^-0.5);
thetamI=acos((1+(wD*tau_mI)^2)^-0.5);
thetapE=acos((1+(wD*tau_pE)^2)^-0.5);
thetamE=acos((1+(wD*tau_mE)^2)^-0.5);
lambda_e=1;%0*200*15/1000; % excitatory synapses learning rate
lambda_i=0.1; % inhibitory synapses learning rate
H_E=-1; % anti-Hebbianity of JIE
H_I=1; % Hebbianity of JEI

f=(1-Jiemean/Jiemax)^mu; % non-linearity in JIE dynamics
ftag=-mu/Jiemax*(1-Jiemean/Jiemax)^(mu-1); % derivative of f

K_Ibar=1-alpha; 
K_Iptilphi=cos(thetapI)*cos(thetapI+phi); % K_I ,p/m for plus/minus, til for tilde, phi/psi for phase phi/psi  
K_Imtilphi=cos(thetamI)*cos(thetamI-phi);
K_Itilphi=K_Iptilphi-alpha*K_Imtilphi;
K_Iptilmphi=cos(thetapI)*cos(thetapI-phi); % mphi/mpsi stands for minus phi/psi
K_Imtilmphi=cos(thetamI)*cos(thetamI+phi);
K_Itilmphi=K_Iptilmphi-alpha*K_Imtilmphi;

K_Iptilpsi=cos(thetapI)*cos(thetapI+psi);
K_Imtilpsi=cos(thetamI)*cos(thetamI-psi);
K_Itilpsi=K_Iptilpsi-alpha*K_Imtilpsi;

K_Ebar=f-alpha;
K_Eptilphi=cos(thetapE)*cos(thetapE-phi);
K_Emtilphi=cos(thetamE)*cos(thetamE+phi);
K_Etilphi=f*K_Eptilphi-alpha*K_Emtilphi;
K_Eptilmphi=cos(thetapE)*cos(thetapE+phi);
K_Emtilmphi=cos(thetamE)*cos(thetamE-phi);
K_Etilmphi=f*K_Eptilmphi-alpha*K_Emtilmphi;

K_Eptilpsi=cos(thetapE)*cos(thetapE+psi);
K_Emtilpsi=cos(thetamE)*cos(thetamE-psi);
K_Etilpsi=f*K_Eptilpsi-alpha*K_Emtilpsi;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Compute the temporal kernels %%%%%%%%%%

[Corr_ie_final,Corr_ei_final,~,~,m_e_T,m_i_T,T_mean_m_e,T_mean_m_i,Delta_extended]=proj.common.Correlations_2D_full_diff(Jeemean,Jeimean,Jiemean,Jiimean,dt,tf); % compute Delta_extended which is the time of integration in Eq. 17
K_pE=1/tau_pE*exp(-Delta_extended*H_E/tau_pE).*heaviside(H_E*Delta_extended); % K E plus
K_mE=1/tau_mE*exp(Delta_extended*H_E/tau_mE).*heaviside(-H_E*Delta_extended); % K E minus
K_pI=1/tau_pI*exp(-Delta_extended*H_I/tau_pI).*heaviside(H_I*Delta_extended); % K I plus
K_mI=1/tau_mI*exp(Delta_extended*H_I/tau_mI).*heaviside(-H_I*Delta_extended); % K E minus

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%% Nullclines Computation %%%%%%%%%%%
[Nullei,Nullie,dJei,dJie,~,~]=NullclinesParallelPt1(JbarD,lambda_i,lambda_e,alpha,tau_pE,tau_mE,tau_pI,tau_mI,H_E,H_I,K_pE,K_mE,K_pI,K_mI,mu,Jiemax,Jeemean,Jiimean,dt,tf); 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%% Vector flow computation %%%%%%%%%
dt=0.001; % smaller time bins for the grid for vector flow
[Jeidot,Jiedot,Jei_arr,Jie_arr]=JdotPhDiagPt1(JbarD,lambda_i,lambda_e,alpha,tau_mE,tau_mI,tau_pE,tau_pI,H_E,H_I,mu,Jiemax,Jeemean,Jiimean,dt,tf); % a function that computs the vector flow

[Jei_grid,Jie_grid]=meshgrid(Jei_arr,Jie_arr); % make the grid in the J_EI-J_IE phase diagram
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%% Make the nullclines with denser points %%%%%%%%
Xei=Nullei(:,1);
Xei=Xei(~isnan(Xei)); % clean nan values
[Xeisorted,Ind]=sort(Xei); % sort them
Yei=Nullei(:,2);
Yei=Yei(~isnan(Yei)); % clean nan values
Yeisorted=Yei(Ind); % sort them
JeinullX=linspace(Xeisorted(1),Xeisorted(end),length(Xeisorted)*5)'; % Jei values of the Jei nullclince
JeinullY=interp1(Xeisorted,Yeisorted,JeinullX,'spline'); % Jie values of the Jei nullclince

Xie=Nullie(:,1);
Xie=Xie(~isnan(Xie)); % clean nan values
[Xiesorted,Ind]=sort(Xie); % sort them
Yie=Nullie(:,2);
Yie=Yie(~isnan(Yie)); % clean nan values
Yiesorted=Yie(Ind);
JienullX=linspace(Xiesorted(1),Xiesorted(end),length(Xiesorted)*5)'; % Jei values of the Jie nullclince
JienullY=interp1(Xiesorted,Yiesorted,JienullX,'spline'); % Jie values of the Jie nullclince

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%% Saving for figure %%%%%%%%%%%%%%%%%%%%

Jeidotall=1000*(Jeidot(:));
Jiedotall=1000*(Jiedot(:));
Jieall=round(Jie_grid',7);
Jeiall=round(Jei_grid',7);
Jeiall=Jeiall(:);
Jieall=Jieall(:);

save('vectorflow/Jeidot','Jeidotall','-double');
save('vectorflow/Jiedot','Jiedotall','-double');
save('vectorflow/Jeiarr','Jeiall','-double');
save('vectorflow/Jiearr','Jieall','-double');
save('vectorflow/JienullX','JienullX','-double');
save('vectorflow/JienullY','JienullY','-double');
save('vectorflow/JeinullX','JeinullX','-double');
save('vectorflow/JeinullY','JeinullY','-double');
