%% The full synaptic dynamics parfor %%
oldparam = sympref('HeavisideAtOrigin',1/2); % heaviside is 0.5 on zero
dt=0.01; % the accuracy through all the script and auxiliary functions (except for the nullclines part)
tf=200; % final time of simulation for network dynamics
%%%%%%%%% Phase diagram features (bif. etc.) %%%%%%%
T=1; % time constant 5msec tau 
D=0.4; % delay in msec
Jiimean=0.4;
Jeemean=0.6;
Jhat=(Jeemean+Jiimean)/2;
syms wD JbarD
if Jeemean>=Jiimean
range=[0.1 5 ;0.01 pi/(2*D)];
Y=vpasolve([(JbarD^2-Jeemean*Jiimean)^0.5==1/cos(wD*D-acos((Jeemean-Jiimean)/(2*(JbarD^2-Jeemean*Jiimean)^0.5))), T*wD==-tan(wD*D-acos((Jeemean-Jiimean)/(2*(JbarD^2-Jeemean*Jiimean)^0.5)))], [JbarD,wD],range); % the frequency on the bifurcation line
elseif Jeemean<Jiimean
range=[0.1 5 ;0.01 pi/D];    
Y=vpasolve([(JbarD^2-Jeemean*Jiimean)^0.5==1/cos(wD*D-acos((Jeemean-Jiimean)/(2*(JbarD^2-Jeemean*Jiimean)^0.5))), T*wD==-tan(wD*D-acos((Jeemean-Jiimean)/(2*(JbarD^2-Jeemean*Jiimean)^0.5)))], [JbarD,wD],range); % the frequency on the bifurcation line
end    
wD=double(Y.wD);
fD=wD/(2*pi); % in
JbarD=double(Y.JbarD);
phi=acos((Jeemean-Jiimean)/(2*(JbarD^2-Jeemean*Jiimean)^0.5));
psi=acos(Jhat/JbarD);
%%%%%%%%% STDP Parameters %%%%%%%%%
alpha=0.98; % relative depression
mu=0.01;%0.015;%0.15;%0.015; % measure of linearity
Jiemax=20; % J_ie_max
tau_pE=2; % typical potentiation time of excitatory synapses
tau_pI=2; % typical potentiation time of inhibitory synapses
tau_mE=5; % typical depression time of excitatory synapses
tau_mI=3; % typical depression time of inhibitory synapses
thetapI=acos((1+(wD*tau_pI)^2)^-0.5);
thetamI=acos((1+(wD*tau_mI)^2)^-0.5);
thetapE=acos((1+(wD*tau_pE)^2)^-0.5);
thetamE=acos((1+(wD*tau_mE)^2)^-0.5);
lambda_e=10;%0*200*15/1000; % excitatory synapses learning rate
lambda_i=1; % inhibitory synapses learning rate
H_E=-1; 
H_I=1;
%%%%%%%%% Generating the synapses matrix %%%%%%%%%
N_e=40; % Size of excitatory population
N_i=10; % Size of inhibitory population
%%% zero order synapses %%% 
Jiemean=6;%J_ie_final;
Jeimean=0.52;%JbarD^2/J_ie_final;
f=(1-Jiemean/Jiemax)^mu;
ftag=-mu/Jiemax*(1-Jiemean/Jiemax)^(mu-1);
K_Ibar=1-alpha;
K_Iptilphi=cos(thetapI)*cos(thetapI+phi);
K_Imtilphi=cos(thetamI)*cos(thetamI-phi);
K_Itilphi=K_Iptilphi-alpha*K_Imtilphi;
K_Iptilmphi=cos(thetapI)*cos(thetapI-phi);
K_Imtilmphi=cos(thetamI)*cos(thetamI+phi);
K_Itilmphi=K_Iptilmphi-alpha*K_Imtilmphi;

K_Iptilpsi=cos(thetapI)*cos(thetapI+psi);
K_Imtilpsi=cos(thetamI)*cos(thetamI-psi);
K_Itilpsi=K_Iptilpsi-alpha*K_Imtilpsi;

K_Ebar=f-alpha;
K_Eptilphi=cos(thetapE)*cos(thetapE-phi);
K_Emtilphi=cos(thetamE)*cos(thetamE+phi);
K_Etilphi=f*K_Eptilphi-alpha*K_Emtilphi;
K_Eptilmphi=cos(thetapE)*cos(thetapE+phi);
K_Emtilmphi=cos(thetamE)*cos(thetamE-phi);
K_Etilmphi=f*K_Eptilmphi-alpha*K_Emtilmphi;

K_Eptilpsi=cos(thetapE)*cos(thetapE+psi);
K_Emtilpsi=cos(thetamE)*cos(thetamE-psi);
K_Etilpsi=f*K_Eptilpsi-alpha*K_Emtilpsi;
%%%%%%%% Building the vector around the zero order %%%%%%%%%
meb=(1+Jiimean-Jeimean)/((1-Jeemean)*(1+Jiimean)+Jeimean*Jiemean);
mib=(1-Jeemean+Jiemean)/((1-Jeemean)*(1+Jiimean)+Jeimean*Jiemean);
gabs=(JbarD^2-Jeemean*Jiimean)^0.5;
if Jeimean*Jiemean<JbarD^2 % FP Regime
    a=-lambda_i*K_Ibar*mib^2;
    b=lambda_i*K_Ibar*meb^2;
    c=-lambda_e*K_Ebar*mib^2;
    d=lambda_e*K_Ebar*meb^2;
    q=lambda_e*ftag*meb*mib;
else % R regime
    mit=(Jiemean*(1+Jiimean)-JbarD^2)/(gabs*JbarD*((1-Jeemean)*(1+Jiimean)+JbarD^2));    
    met=JbarD/Jiemean*mit;
    a=-lambda_i*(K_Ibar*mib^2+K_Itilmphi*mit^2/(2*gabs));
    b=lambda_i*(K_Ibar*meb^2+K_Itilphi*met^2/(2*gabs));
    c=-lambda_e*(K_Ebar*mib^2+K_Etilphi*mit^2/(2*gabs));
    d=lambda_e*(K_Ebar*meb^2+K_Etilmphi*met^2/(2*gabs));
    q=lambda_e*ftag*(meb*mib+met*mit/2*K_Eptilpsi); % self deperssion coefficient
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
ordmag=10^-2;%10^-11;

J_ei_std=Jeimean/10;
va_ei=[(q-a) (q-a) ;(-q+a) (-q+a); 0 0];
vq_ei=[0 0 ; 0 0 ; 0 0];
vd_ei=[-b b ; -b b ; -b b];
%check_ei=ordmag*vd_ei;%0.0001*[-1 1 ; -1 1 ; -1 1];%zeros(N_e-1,N_i)];%[ones(1,N_i) ; -ones(N_e-1,N_i)/(N_e-1)];%0.01*[1 -1 ; zeros(N_e-1,N_i)];%+normrnd(0,0.001,N_e,N_i);%% %;% ;%0.01*[[1 -1 zeros(1,N_i-2)] ; zeros(N_e-1,N_i)];
%Jei=Jeimean+check_ei;%

J_ei_noise=normrnd(0,J_ei_std,N_e,N_i);
Jei=(Jeimean*ones(N_e,N_i))-mean(J_ei_noise(:))+J_ei_noise;


J_ie_std=Jiemean/10;
va_ie=[-c c 0; -c c 0];
vq_ie=[-1 1 0 ; 0 0 0];
vd_ie=[-(d+q) -(d+q) -(d+q) ; d+q d+q d+q];
%check_ie=ordmag*vd_ie;%0.001*[-1 -1 -1 ; 1 1 1];%[ones(1,N_e) ; -ones(N_i-1,N_e)/(N_i-1)];% 0.0000001*[[1 -0.5 -0.5] ; [1 -0.5 -0.5]];%
%Jie=Jiemean+check_ie;
J_ie_noise=normrnd(0,J_ie_std,N_i,N_e);
Jie=Jiemean*ones(N_i,N_e)-mean(J_ie_noise(:))+J_ie_noise;

Jee=Jeemean*ones(N_e,N_e);
%Jee=Jee-diag(diag(Jee));

Jii=Jiimean*ones(N_i,N_i);
%Jii=Jii-diag(diag(Jii));
%%% Analytical solution %%%
J=[[Jee/N_e -Jei/N_i];[Jie/N_e -Jii/N_i]]; % connectivity matrix
diagonal=eye(N_e+N_i);
mfa=(diagonal-J)\ones(N_e+N_i,1); % The exact fixed point solution
%%%%%%%%%%%%%%%%%%%%%%%%%%%
m_e_history=0.2;
m_i_history=1.3;
[Corr_ie,Corr_ei,~,~,m_e_T,m_i_T,T_mean_m_e,T_mean_m_i,Delta_extended]=proj.common.Correlations_2D_full_diff(Jee,Jei,Jie,Jii,dt,tf);
K_pE=1/tau_pE*exp(-Delta_extended*H_E/tau_pE).*heaviside(H_E*Delta_extended);
K_mE=1/tau_mE*exp(Delta_extended*H_E/tau_mE).*heaviside(-H_E*Delta_extended);
K_pI=1/tau_pI*exp(-Delta_extended*H_I/tau_pI).*heaviside(H_I*Delta_extended);
K_mI=1/tau_mI*exp(Delta_extended*H_I/tau_mI).*heaviside(-H_I*Delta_extended);
tic
t=1:10;
%t_chunk=100;
numtrails=10;%100;
%check_arr=[reshape(check_ei.',1,[]) reshape(check_ie.',1,[])];
check_arr=[reshape((Jei-mean(Jei(:))).',1,[]) reshape((Jie-mean(Jie(:))).',1,[])];
J_ei_dot=zeros(N_e,N_i);
J_ie_dot=zeros(N_i,N_e);
dtlearn=1;

mulvn=N_e*(N_i-1);
mulve=N_i*(N_e-1);
mulva=N_e-1;
mulvd=N_i-1;

% create the vectors
vn=[ones(N_i-1,1) -diag(ones(1,N_i-1))];
zvn=mat2cell(repmat(vn,1,N_e),N_i-1,N_i*ones(1,N_e));
vn=[blkdiag(zvn{:}) zeros(size((blkdiag(zvn{:})),1),2*N_e*N_i-size((blkdiag(zvn{:})),2))]'/2^0.5;

ve=[ones(N_e-1,1) -diag(ones(1,N_e-1))];
zve=mat2cell(repmat(ve,1,N_i),N_e-1,N_e*ones(1,N_i));
ve=[zeros(size((blkdiag(zve{:})),1),2*N_e*N_i-size((blkdiag(zve{:})),2)) blkdiag(zve{:})]'/2^0.5;

vaie=repmat([ones(N_e-1,1) -diag(ones(1,N_e-1))],1,N_i);
zvaei=mat2cell(repmat(ones(1,N_i),1,N_e-1),1,N_i*ones(1,N_e-1));
vaei=[ones(N_e-1,N_i) -blkdiag(zvaei{:})];
va=[(a-q)*vaei c*vaie]'/(((a-q)^2+c^2)*2*N_i)^0.5;

vdei=repmat([ones(N_i-1,1) -diag(ones(1,N_i-1))],1,N_e);
zvdie=mat2cell(repmat(ones(1,N_e),1,N_i-1),1,N_e*ones(1,N_i-1));
vdie=[ones(N_i-1,N_e) -blkdiag(zvdie{:})];
vd=[b*vdei (d+q)*vdie]'/((b^2+(d+q)^2)*2*N_e)^0.5;

vu=[ones(1,2*N_e*N_i) ; ones(1,N_e*N_i) -ones(1,N_e*N_i)]'/(2*N_e*N_i)^0.5;

parfor trail=1:numtrails
    [Vnvol,Vevol,Vavol,Vdvol,stdmebar,stdmibar,stdmetil,stdmitil,Jeimeandyn,Jiemeandyn,dJ_arr_t] = FullSynDynMultiTrails(m_e_history,m_i_history,Jei,Jie,Jee,Jii,t,Jiemax,mu,alpha,JbarD,Jeemean,Jiimean,vn,ve,vu,vaei,vaie,vdei,vdie,mulvn,mulve,mulva,mulvd,dtlearn,lambda_e,lambda_i,K_Ibar,K_Itilmphi,K_Itilphi,K_Eptilpsi,K_Etilphi,K_Etilmphi,K_pI,K_pE,K_mI,K_mE,N_e,N_i,dt,tf)
    parsave(sprintf('Figure5_simulationsdataNEW%d.mat',trail),Vnvol,Vevol,Vavol,Vdvol,stdmebar,stdmibar,stdmetil,stdmitil,Jeimeandyn,Jiemeandyn,dJ_arr_t);
end
toc
%%%% BELOW is the name of the previous working simulation!!!!!! %%%%
%%%%!!!! Figure5_simulationsdataNEW !!!!%%%%

%% The graphs of the previous sections for 100 trails
base_filename='Figure5_simulationsdataNEW';
numtrails=10;
Vnvol_alltrails=[];
Vevol_alltrails=[];
Vavol_alltrails=[];
Vdvol_alltrails=[];
stdmebar_alltrails=[];
stdmibar_alltrails=[];
stdmetil_alltrails=[];
stdmitil_alltrails=[];
Jeimeandynalltrails=[];
Jiemeandynalltrails=[];
dJarralltrails=[];
for i=1:numtrails
changing_index=i;
full_filename = strcat(base_filename, num2str(changing_index), '.mat');
data = load(full_filename);
Vnvol_alltrails(i,:)=data.DynVar.Vnvol;
Vevol_alltrails(i,:)=data.DynVar.Vevol;
Vavol_alltrails(i,:)=data.DynVar.Vavol;
Vdvol_alltrails(i,:)=data.DynVar.Vdvol;
stdmebar_alltrails(i,:)=data.DynVar.stdmebar;
stdmibar_alltrails(i,:)=data.DynVar.stdmibar;
stdmetil_alltrails(i,:)=data.DynVar.stdmetil;
stdmitil_alltrails(i,:)=data.DynVar.stdmitil;
Jeimeandynalltrails(i,:)=data.DynVar.Jeimeandyn;
Jiemeandynalltrails(i,:)=data.DynVar.Jiemeandyn;
dJarr=data.DynVar.dJ_arr_t;
dJarralltrails(i,:,:)=dJarr';
end