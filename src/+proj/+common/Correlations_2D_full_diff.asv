%% Correlations_2D %%
function [Corr_ie_final,Corr_ei_final,Corr_ee_final,Corr_ii_final,m_e_T,m_i_T,T_mean_m_e,T_mean_m_i,Delta_extended] = Correlations_2D_full_diff(J_ee,J_ei,J_ie,J_ii,dt,tf)
% This function is the simulation of the cross-correlations in the paper:
% "Functional stability and recurrent STDP in Rhythmogenesis"

%   Description:

%       Gets the dynamics of the network firing rates and computes the
%       correlations (cross and auto)

%   Inputs:

%       J_ee          -   E-to-E connectivity matrix
%       J_ei          -   I-to-E connectivity matrix
%       J_ie          -   E-to-I connectivity matrix
%       J_ii          -   I-to-I connectivity matrix
%       dt            -   time bin
%       tf            -   final time of simulation

%   Outputs: Corr_ie_final,Corr_ei_final,Corr_ee_final,Corr_ii_final,m_e_T,m_i_T,T_mean_m_e,T_mean_m_i,Delta_extended

%       Corr_ij_final , i,j=e,i  - correlations between i and j
%       m_e_T                    - m_e in a period
%       m_i_t                    - m_i in a period
%       T_mean_m_e,T_mean_m_i    -   Time period of m_e and m_i (sometimes
%       different when in only the inhibitory neurons are rhythmic)
%       Delta_extended - the time in which the correlaitons are computed

%   Dependencies:

%   Two_populations_full_rate_model_history.m - computes the diring rate
%   dynamics
%
% Authors: Gabi Socolovsky & Maoz Shamir
% Date: 2025-09-29
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% History of m_e and m_i , -D<t<0 %%
m_e_history=0.1;
m_i_history=0.5;
N_e=size(J_ei,1); % size of excitatory poulation
N_i=size(J_ei,2); % size of inhibitory population
%% Compute the neural dynamics and define variables for correlations %%
global Delta_min Delta_max % max and min values for time of correlations (for integration) - note - they can be unglobalized

[m_e,m_i,T_mean_m_e,T_mean_m_i,time]=proj.common.Two_populations_full_rate_model_history(m_e_history,m_i_history,J_ee,J_ei,J_ie,J_ii,dt,tf);
Delta_min=-200; % min. time for correlations
Delta_max=200; % max. time for correlations

T_mean_m_e=round(T_mean_m_e,-log10(dt)); % leaving only digits up to dt
T_mean_m_i=round(T_mean_m_e,-log10(dt)); % leaving only digits up to dt
Corr_ie_final=zeros(N_i,N_e,length(Delta_min:dt:Delta_max)); % IE correlation matrix (empty)
Corr_ei_final=zeros(N_e,N_i,length(Delta_min:dt:Delta_max)); % EI correlation matrix (empty)

t_f_ind=length(time); % The initial time at which the corrleation is calculated
%% If rhythmic take a period of the dynamics %%
if T_mean_m_e>0
    m_e_T=m_e(:,(t_f_ind-round(T_mean_m_e/dt)+1):t_f_ind); % taking a period of m_e
    m_i_T=m_i(:,(t_f_ind-round(T_mean_m_e/dt)+1):t_f_ind); % taking a period of m_i
else
    m_e_T=nan; % if not rhtyhmic than nan
    m_i_T=nan; % if not rhtyhmic than nan
end
%% Compute Cross-correlations %%
for n=1:N_e
    for k=1:N_i
        
        if isnan(T_mean_m_e(n))  %  When m_e is non-oscillatory (than m_i is not oscillatory too), T_mean_m_e=T_mean_m_i=NaN
            if isnan(T_mean_m_i(k))
                corr=m_e(n,end)*m_i(k,end); % in the case of non oscillatory m, I  choose an arbitrary slot, since every slot has the mean value
                Corr_ie_final(k,n,:)=corr;
                Corr_ei_final(n,k,:)=Corr_ie_final(k,n,:);
            else
                Corr_ie_final(k,n,:)=0;
                Corr_ei_final(n,k,:)=Corr_ie_final(k,n,:);
            end
        elseif isnan(T_mean_m_i(k))
            Corr_ie_final(k,n,:)=0;
            Corr_ei_final(n,k,:)=Corr_ie_final(k,n,:);
        else
            
            m_e_t=m_e(n,(t_f_ind-round(T_mean_m_e(n)/dt)+1):t_f_ind); % one period 
            m_i_t=m_i(k,(t_f_ind-round(T_mean_m_e(n)/dt)+1):t_f_ind); %
            
            
            corr_ei=fliplr(((toeplitz([m_i_t(1) fliplr(m_i_t(2:end))],m_i_t)*m_e_t')./length(m_e_t))');
            
            
            corr_ei=repmat(corr_ei,1,round(length(0:dt:Delta_max)/round(T_mean_m_e(n)/dt))+2);
            corr_ei=[(corr_ei(2:end)) corr_ei];
            
            corr_ei=corr_ei(round((length(corr_ei)-length(Delta_min:dt:Delta_max))/2)+1:(length(corr_ei)-(length(corr_ei)-length(Delta_min:dt:Delta_max))/2));
            
            Corr_ei_final(n,k,:)=corr_ei;
            Corr_ie_final(k,n,:)=fliplr(corr_ei);
        end
    end
end
%%
if N_e==1 && N_i==1 % autocorrelations only for ORDER PARAMETERS (when Ne=1 and Ni=1)
    if isnan(T_mean_m_e)  %  When m_e is non-oscillatory (than m_i is not oscillatory too), T_mean_m_e=T_mean_m_i=NaN
        if isnan(T_mean_m_i)
            Corr_ee_final(:)=m_e(end)*m_e(end)*ones(1,length(Delta_min:dt:Delta_max)); % in the case of non oscillatory m, I  choose an arbitrary slot, since every slot has the mean value (from the "My_delayed...")
            Corr_ii_final(:)=m_i(end)*m_i(end)*ones(1,length(Delta_min:dt:Delta_max)); % in the case of non oscillatory m, I  choose an arbitrary slot, since every slot has the mean value (from the "My_delayed...")
        else
            Corr_ee_final(:)=0*ones(1,length(Delta_min:dt:Delta_max));
            Corr_ii_final(:)=0*ones(1,length(Delta_min:dt:Delta_max));
        end
    elseif isnan(T_mean_m_i(k))
        Corr_ee_final(:)=0*ones(1,length(Delta_min:dt:Delta_max));
        Corr_ii_final(:)=0*ones(1,length(Delta_min:dt:Delta_max));
    else
        
        m_e_t=m_e((t_f_ind-round(T_mean_m_e(n)/dt)+1):t_f_ind); %
        m_i_t=m_i((t_f_ind-round(T_mean_m_e(n)/dt)+1):t_f_ind); %
        
        
        corr_ee=fliplr(((toeplitz([m_e_t(1) fliplr(m_e_t(2:end))],m_e_t)*m_e_t')./length(m_e_t))');
        corr_ee=repmat(corr_ee,1,round(Delta_max/T_mean_m_e)+1);
        corr_ee=corr_ee(1:round(Delta_max/dt)+1);
        Corr_ee_final=[fliplr(corr_ee(2:end)) corr_ee];
        
        corr_ii=fliplr(((toeplitz([m_i_t(1) fliplr(m_i_t(2:end))],m_i_t)*m_i_t')./length(m_i_t))');
        corr_ii=repmat(corr_ii,1,round(Delta_max/T_mean_m_i)+1);
        corr_ii=corr_ii(1:round(Delta_max/dt)+1);
        Corr_ii_final=[fliplr(corr_ii(2:end)) corr_ii];
    end
else
    Corr_ee_final=0; % we assume no STDP dynamics of individual intra-synapses
    Corr_ii_final=0; % we assume no STDP dynamics of individual intra-synapses
end
Delta_extended=-((length(Corr_ei_final(n,k,:))-1)*dt/2):dt:((length(Corr_ei_final(n,k,:))-1)*dt/2);
end
